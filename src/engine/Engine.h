// Generated by dia2code
#ifndef ENGINE__ENGINE__H
#define ENGINE__ENGINE__H

#include <vector>

namespace state {
  class State;
};
namespace engine {
  class Command;
};
namespace state {
  class Infantry;
  class Fighter;
  class Structure;
};
namespace engine {
  class Ruler;
}

#include "state/State.h"
#include "EngineMode.h"
#include "state/Fighter.h"
#include "state/Infantry.h"
#include "Ruler.h"

namespace engine {

  /// class Engine - 
  class Engine {
    // Associations
    engine::EngineMode mode;
    // Attributes
  protected:
    state::State currentState;
    std::vector<Command*> commands;
    // Operations
  public:
    ~Engine ();
    Engine ();
    EngineMode getMode () const;
    const state::State& getState () const;
    void addCommand (Command* cmd);
    void ProduceInfantry (int x, int y, state::Infantry* unit, state::ElementList * ListOfElements);
    void ProduceFighter (int x, int y, state::Fighter* unit, state::ElementList * ListOfElements);
    void AttackEnemy (state::Element* attacker, state::Element* defender);
    void CaptureEnemy (state::Infantry* capturer, state::Structure* captured);
    void MoveUnit (state::Element* mover, state::Element* destination, state::ElementList StaticMapElements);
    bool update (int time);
  protected:
    void loadLevel (const char* file_name) const;
    void setMode (EngineMode mode);
  };

};

#endif
